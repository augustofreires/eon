#!/usr/bin/expect -f

set timeout 30

spawn ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@31.97.28.231

expect {
    "Enter passphrase for key" {
        send "\r"
        expect {
            "password:" {
                send "62uDLW4RJ9ae28EPVfp5yzT##\r"
            }
            "Enter passphrase for key" {
                send "\r"
                expect "password:"
                send "62uDLW4RJ9ae28EPVfp5yzT##\r"
            }
        }
    }
    "password:" {
        send "62uDLW4RJ9ae28EPVfp5yzT##\r"
    }
}

expect "# "

# Connect to PostgreSQL as postgres user
send "sudo -u postgres psql -d eon_platform -c \"SELECT id, email, name, role, status FROM users;\"\r"
expect "# "

# Check if admin user exists with different email or status
send "sudo -u postgres psql -d eon_platform -c \"SELECT id, email, name, role, status FROM users WHERE role = 'admin';\"\r"
expect "# "

# Check the table structure to see what columns exist
send "sudo -u postgres psql -d eon_platform -c \"\\d users;\"\r"
expect "# "

# Let's create an admin user if it doesn't exist
send "echo 'Creating admin user...'\r"
expect "# "

# Check if we need to create password hash for admin
send "node -e \"
const bcrypt = require('bcrypt');
const password = '123456';
bcrypt.hash(password, 10, (err, hash) => {
  if (err) throw err;
  console.log('Admin password hash:', hash);
});
\"\r"
expect "# "

send "exit\r"
expect eof