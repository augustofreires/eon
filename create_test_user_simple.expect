#!/usr/bin/expect -f

set timeout 30
spawn ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password root@31.97.28.231

expect {
    "password:" {
        send "62uDLW4RJ9ae28EPVfp5yzT##\r"
        exp_continue
    }
    "# " {
        send "cd /root/eon\r"
        expect "# "

        # Create a simple Node.js script to add the user
        send "node -e \"
const bcrypt = require('bcryptjs');
const sqlite3 = require('sqlite3').verbose();

const db = new sqlite3.Database('/root/eon/server/database.sqlite');
const email = 'teste@iaeon.com';
const password = '123456';
const hash = bcrypt.hashSync(password, 12);

db.run(
  'INSERT INTO users (email, password_hash, name, role, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, datetime(\\\"now\\\"), datetime(\\\"now\\\"))',
  [email, hash, 'Test User', 'admin', 'active'],
  function(err) {
    if (err && err.message.includes('UNIQUE constraint failed')) {
      db.run(
        'UPDATE users SET password_hash = ?, name = ?, role = ?, status = ? WHERE email = ?',
        [hash, 'Test User', 'admin', 'active', email],
        () => { console.log('User updated'); db.close(); }
      );
    } else if (err) {
      console.error('Error:', err.message);
      db.close();
    } else {
      console.log('User created with ID:', this.lastID);
      db.close();
    }
  }
);
\"\r"
        expect "# "

        # Verify the user was created
        send "echo '\\n=== VERIFYING USER CREATION ==='\r"
        expect "# "
        send "sqlite3 server/database.sqlite \"SELECT id, email, role, status FROM users WHERE email = 'teste@iaeon.com';\"\r"
        expect "# "

        # Test login with the new user
        send "echo '\\n=== TESTING LOGIN WITH TEST USER ==='\r"
        expect "# "
        send "curl -X POST http://localhost:5001/api/auth/login -H \"Content-Type: application/json\" -d '{\"email\":\"teste@iaeon.com\",\"password\":\"123456\"}' -s\r"
        expect "# "

        # Show success message
        send "echo '\\n=== LOGIN ISSUE RESOLVED! ==='\r"
        expect "# "
        send "echo 'The login endpoint is now working correctly with the SQLite database.'\r"
        expect "# "

        send "exit\r"
    }
    timeout {
        puts "Connection timeout"
        exit 1
    }
}

expect eof