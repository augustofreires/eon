#!/usr/bin/expect -f

set timeout 30
spawn ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no root@31.97.28.231

expect {
    "password:" {
        send "62uDLW4RJ9ae28EPVfp5yzT##\r"
        expect "root@"

        send "echo '=== INVESTIGATING BALANCE UPDATE ISSUE ==='\r"
        expect "root@"

        send "echo '1. Check current client build timestamp:'\r"
        expect "root@"

        send "ls -la /root/eon/client/build/static/js/ | head -5\r"
        expect "root@"

        send "echo '2. Check if switch-account endpoint exists in routes:'\r"
        expect "root@"

        send "grep -n 'switch-account' /root/eon/server/routes/auth.js\r"
        expect "root@"

        send "echo '3. Check recent access logs for switch-account calls:'\r"
        expect "root@"

        send "grep 'switch-account' /var/log/nginx/access.log | tail -5\r"
        expect "root@"

        send "echo '4. Check database for user tokens:'\r"
        expect "root@"

        send "cd /root/eon && node -e \"
const { Pool } = require('pg');
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://eon_user:eon_password@localhost:5432/eon_db'
});

pool.query('SELECT id, deriv_account_id, deriv_token FROM users LIMIT 3')
  .then(result => {
    console.log('Database users:');
    result.rows.forEach(row => {
      console.log('ID:', row.id, 'Account:', row.deriv_account_id, 'Token exists:', !!row.deriv_token);
    });
    process.exit(0);
  })
  .catch(err => {
    console.error('DB Error:', err.message);
    process.exit(1);
  });
\"\r"
        expect "root@"

        send "echo '5. Check PM2 logs for any errors:'\r"
        expect "root@"

        send "pm2 logs --lines 20 --nostream\r"
        expect "root@"

        send "echo '6. Check server process details:'\r"
        expect "root@"

        send "ps aux | grep 'node.*server' | grep -v grep\r"
        expect "root@"

        send "echo '=== INVESTIGATION COMPLETE ==='\r"
        expect "root@"

        send "exit\r"
    }
    "Are you sure you want to continue connecting" {
        send "yes\r"
        exp_continue
    }
    timeout {
        puts "Connection timeout"
        exit 1
    }
}

expect eof