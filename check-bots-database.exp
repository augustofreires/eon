#!/usr/bin/expect -f

set timeout 30
set password "62uDLW4RJ9ae28EPVfp5yzT##"

spawn ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no root@31.97.28.231

expect {
    "*password:" {
        send "$password\r"
        exp_continue
    }
    "*# " {
        send "cd /root/eon\r"
        expect "*# "

        # Verificar quantos bots existem no PostgreSQL
        puts "\nðŸ¤– Verificando bots no PostgreSQL..."
        send "sudo -u postgres psql -d eon_platform -c 'SELECT COUNT(*) FROM bots;'\r"
        expect "*# "

        # Listar os bots existentes
        puts "\nðŸ“‹ Listando bots..."
        send "sudo -u postgres psql -d eon_platform -c 'SELECT id, name, description, is_active FROM bots LIMIT 5;'\r"
        expect "*# "

        # Verificar se ainda hÃ¡ dados no SQLite (para migraÃ§Ã£o se necessÃ¡rio)
        puts "\nðŸ’¾ Verificando SQLite antigo..."
        send "sqlite3 server/database.sqlite 'SELECT COUNT(*) FROM bots;' 2>/dev/null || echo 'SQLite nÃ£o encontrado ou sem dados'\r"
        expect "*# "

        send "sqlite3 server/database.sqlite 'SELECT id, name, description FROM bots LIMIT 3;' 2>/dev/null || echo 'Sem dados SQLite'\r"
        expect "*# "

        # Testar endpoint com autenticaÃ§Ã£o usando um token JWT vÃ¡lido
        puts "\nðŸ”‘ Testando endpoint com autenticaÃ§Ã£o..."
        send "curl -s -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9' http://localhost:5000/api/bots\r"
        expect "*# "

        # Verificar se hÃ¡ usuÃ¡rios para gerar token vÃ¡lido
        puts "\nðŸ‘¥ Verificando usuÃ¡rios..."
        send "sudo -u postgres psql -d eon_platform -c 'SELECT id, email, role FROM users LIMIT 3;'\r"
        expect "*# "

        puts "\nâœ… DIAGNÃ“STICO COMPLETO"
        send "exit\r"
    }
}

expect eof