#!/usr/bin/expect -f

set timeout 30

spawn ssh root@31.97.28.231

expect {
    "password:" {
        send "EON2024!\r"
        exp_continue
    }
    "root@" {
        # We're connected, continue with commands
    }
    timeout {
        puts "Connection timeout"
        exit 1
    }
}

# Check current deployment status
send "cd /root/eon\r"
expect "root@"

send "pwd && ls -la\r"
expect "root@"

# Check if build contains our latest fixes
send "echo '=== CHECKING BUILD TIMESTAMP ==='\r"
expect "root@"

send "ls -la client/build/ | head -10\r"
expect "root@"

# Check the main JS bundle for our fixes
send "echo '=== CHECKING BUNDLE FOR RECENT FIXES ==='\r"
expect "root@"

send "find client/build/static/js -name '*.js' -exec grep -l 'updateUser.*accounts' {} \\;\r"
expect "root@"

# Check if our WebSocket service changes are there
send "find client/build/static/js -name '*.js' -exec grep -l 'DerivWebSocketService' {} \\;\r"
expect "root@"

# Check PM2 status
send "echo '=== PM2 STATUS ==='\r"
expect "root@"

send "pm2 status\r"
expect "root@"

# Check backend logs for any errors
send "echo '=== RECENT BACKEND LOGS ==='\r"
expect "root@"

send "pm2 logs eon-backend --lines 20\r"
expect "root@"

# Check nginx status and config
send "echo '=== NGINX STATUS ==='\r"
expect "root@"

send "systemctl status nginx --no-pager -l\r"
expect "root@"

# Check current nginx config
send "echo '=== NGINX CONFIG ==='\r"
expect "root@"

send "cat /etc/nginx/sites-available/iaeon.site | grep -A 10 -B 5 'location /'\r"
expect "root@"

# Test if backend is responding
send "echo '=== TESTING BACKEND API ==='\r"
expect "root@"

send "curl -s http://localhost:3001/api/test || echo 'Backend not responding'\r"
expect "root@"

# Check database connection
send "echo '=== TESTING DATABASE ==='\r"
expect "root@"

send "cd /root/eon && node -e \"const { Pool } = require('pg'); const pool = new Pool({user: 'augusto', host: 'localhost', database: 'eon_pro', password: 'EON2024!', port: 5432}); pool.query('SELECT NOW()', (err, res) => { console.log(err ? 'DB Error: ' + err.message : 'DB Connected: ' + res.rows[0].now); pool.end(); });\"\r"
expect "root@"

# Keep the session open for real-time monitoring
send "echo '=== READY FOR REAL-TIME TESTING ==='\r"
expect "root@"

send "echo 'Connection established. Ready for commands...'\r"
expect "root@"

interact