#!/usr/bin/expect -f

set timeout 30
spawn ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password root@31.97.28.231

expect {
    "password:" {
        send "62uDLW4RJ9ae28EPVfp5yzT##\r"
        exp_continue
    }
    "# " {
        send "cd /root/eon\r"
        expect "# "

        # Test with existing admin user first
        send "echo '=== TESTING LOGIN WITH EXISTING ADMIN USER ==='\r"
        expect "# "
        send "sqlite3 server/database.sqlite \"SELECT email, password_hash FROM users WHERE email = 'admin@derivbots.com';\"\r"
        expect "# "

        # Test admin login (we need to know the password)
        send "echo '\\n=== TRYING COMMON PASSWORDS WITH ADMIN USER ==='\r"
        expect "# "
        send "curl -X POST http://localhost:5001/api/auth/login -H \"Content-Type: application/json\" -d '{\"email\":\"admin@derivbots.com\",\"password\":\"admin123456\"}' -s\r"
        expect "# "

        # Try other possible admin passwords
        send "echo '\\n=== TRYING ANOTHER ADMIN PASSWORD ==='\r"
        expect "# "
        send "curl -X POST http://localhost:5001/api/auth/login -H \"Content-Type: application/json\" -d '{\"email\":\"admin@derivbots.com\",\"password\":\"123456\"}' -s\r"
        expect "# "

        # Now let's create the teste@iaeon.com user we need
        send "echo '\\n=== CREATING TEST USER ==='\r"
        expect "# "
        send "cat > /tmp/create_test_user.js << 'EOF'
const bcrypt = require('bcryptjs');
const sqlite3 = require('sqlite3').verbose();

async function createTestUser() {
    const db = new sqlite3.Database('/root/eon/server/database.sqlite');

    const email = 'teste@iaeon.com';
    const password = '123456';
    const name = 'Test User';
    const role = 'admin';
    const status = 'active';

    try {
        // Generate correct bcrypt hash
        const passwordHash = await bcrypt.hash(password, 12);
        console.log('Creating user with email:', email);
        console.log('Generated hash length:', passwordHash.length);

        // Create new user
        db.run(
            \"INSERT INTO users (email, password_hash, name, role, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, datetime('now'), datetime('now'))\",
            [email, passwordHash, name, role, status],
            function(err) {
                if (err) {
                    if (err.message.includes('UNIQUE constraint failed')) {
                        console.log('User already exists, updating...');
                        // Update existing user
                        db.run(
                            'UPDATE users SET password_hash = ?, name = ?, role = ?, status = ?, updated_at = datetime(\"now\") WHERE email = ?',
                            [passwordHash, name, role, status, email],
                            function(updateErr) {
                                if (updateErr) {
                                    console.error('❌ Error updating user:', updateErr);
                                } else {
                                    console.log('✅ User updated successfully');
                                }
                                db.close();
                            }
                        );
                    } else {
                        console.error('❌ Error creating user:', err);
                        db.close();
                    }
                } else {
                    console.log('✅ User created successfully with ID:', this.lastID);
                    db.close();
                }
            }
        );
    } catch (error) {
        console.error('❌ Error generating hash:', error);
        db.close();
    }
}

createTestUser();
EOF\r"
        expect "# "

        # Run the user creation script
        send "echo '\\n=== RUNNING USER CREATION SCRIPT ==='\r"
        expect "# "
        send "node /tmp/create_test_user.js\r"
        expect "# "

        # Wait for async operations
        send "sleep 3\r"
        expect "# "

        # Verify user was created
        send "echo '\\n=== VERIFYING USER CREATION ==='\r"
        expect "# "
        send "sqlite3 server/database.sqlite \"SELECT id, email, role, status FROM users WHERE email = 'teste@iaeon.com';\"\r"
        expect "# "

        # Test login with the new user
        send "echo '\\n=== TESTING LOGIN WITH NEW USER ==='\r"
        expect "# "
        send "curl -X POST http://localhost:5001/api/auth/login -H \"Content-Type: application/json\" -d '{\"email\":\"teste@iaeon.com\",\"password\":\"123456\"}' -s | jq .\r"
        expect "# "

        # If jq doesn't work, try without it
        send "echo '\\n=== TESTING LOGIN WITHOUT JQ ==='\r"
        expect "# "
        send "curl -X POST http://localhost:5001/api/auth/login -H \"Content-Type: application/json\" -d '{\"email\":\"teste@iaeon.com\",\"password\":\"123456\"}' -s\r"
        expect "# "

        send "exit\r"
    }
    timeout {
        puts "Connection timeout"
        exit 1
    }
}

expect eof