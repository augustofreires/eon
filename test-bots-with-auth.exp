#!/usr/bin/expect -f

set timeout 30
set password "62uDLW4RJ9ae28EPVfp5yzT##"

spawn ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no root@31.97.28.231

expect {
    "*password:" {
        send "$password\r"
        exp_continue
    }
    "*# " {
        send "cd /root/eon\r"
        expect "*# "

        # Primeiro, verificar se hÃ¡ usuÃ¡rios no PostgreSQL
        puts "\nðŸ‘¥ Verificando usuÃ¡rios no sistema..."
        send "sudo -u postgres psql -d eon_platform -c \"SELECT id, email, role FROM users LIMIT 3;\" --pset=pager=off\r"
        expect "*# "

        # Criar um token de teste para o primeiro usuÃ¡rio
        puts "\nðŸ”‘ Gerando token de teste..."
        send "cd server && node -e \"const jwt = require('jsonwebtoken'); const token = jwt.sign({userId: 1, email: 'admin@test.com', role: 'admin'}, 'minha-chave-secreta-muito-longa-e-segura-para-desenvolvimento-12345', {expiresIn: '1h'}); console.log('TOKEN:', token);\"\r"
        expect "*# "

        # Aguardar um pouco e testar o endpoint com o token
        sleep 2
        puts "\nðŸ§ª Testando endpoint com token..."

        # Vamos usar uma variÃ¡vel para capturar o token (mÃ©todo mais simples)
        send "TOKEN=\\$(node -e \"const jwt = require('jsonwebtoken'); console.log(jwt.sign({userId: 1, email: 'admin@test.com', role: 'admin'}, 'minha-chave-secreta-muito-longa-e-segura-para-desenvolvimento-12345', {expiresIn: '1h'}));\")\r"
        expect "*# "

        send "curl -s -H \"Authorization: Bearer \\$TOKEN\" http://localhost:5000/api/bots\r"
        expect "*# "

        puts "\nâœ… Teste concluÃ­do"
        send "exit\r"
    }
}

expect eof