#!/usr/bin/expect -f

# URGENT: Balance Subscription Fix Deployment
# Fixes 2 critical issues:
# 1. Add missing subscribeToBalanceUpdates() call after authorization
# 2. Enhance debugging for token extraction in balance subscription

set timeout 30

# VPS connection details
set vps_ip "31.97.28.231"
set vps_user "root"
set vps_pass "62uDLW4RJ9ae28EPVfp5yzT##"
set project_path "/root/eon"

puts "üöÄ URGENT: Deploying balance subscription fix..."

# Connect to VPS
spawn ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=yes -o PreferredAuthentications=password $vps_user@$vps_ip

expect {
    "password:" {
        send "$vps_pass\r"
    }
    timeout {
        puts "‚ùå Connection timeout"
        exit 1
    }
}

expect "#"
puts "‚úÖ Connected to VPS"

# Navigate to project
send "cd $project_path\r"
expect "#"

# First, backup the current file
send "cp client/src/services/DerivWebSocketService.ts client/src/services/DerivWebSocketService.ts.backup.$(date +%Y%m%d_%H%M%S)\r"
expect "#"
puts "‚úÖ Backup created"

# CRITICAL FIX 1: Add subscribeToBalanceUpdates() call after authorization
puts "üîß CRITICAL FIX 1: Adding subscribeToBalanceUpdates() call..."

send "cat > /tmp/fix_authorization.patch << 'EOF'
--- a/client/src/services/DerivWebSocketService.ts
+++ b/client/src/services/DerivWebSocketService.ts
@@ -203,6 +203,9 @@
             console.log('‚úÖ Autoriza√ß√£o realizada com sucesso para conta:', data.authorize.loginid);
             this.authToken = token;
             this.currentAccount = data.authorize.loginid;
+
+            // PADR√ÉO OFICIAL DERIV: Subscribe to balance updates after authorization
+            this.subscribeToBalanceUpdates();
+
             resolve(true);
           }
         }
EOF\r"
expect "#"

# Apply the fix by searching and replacing the specific section
send "sed -i '/console.log(.‚úÖ Autoriza√ß√£o realizada com sucesso para conta:., data.authorize.loginid);/,/resolve(true);/{
/this.currentAccount = data.authorize.loginid;/a\\

            // PADR√ÉO OFICIAL DERIV: Subscribe to balance updates after authorization\\
            this.subscribeToBalanceUpdates();\\

}' client/src/services/DerivWebSocketService.ts\r"
expect "#"

# CRITICAL FIX 2: Enhance subscribeToBalanceUpdates function with better debugging
puts "üîß CRITICAL FIX 2: Enhancing balance subscription debugging..."

send "cat > /tmp/enhanced_balance_sub.js << 'EOF'
  /**
   * PADR√ÉO OFICIAL DERIV: Subscribe to balance updates after authorization
   */
  private subscribeToBalanceUpdates(): void {
    console.log('üí∞ Subscribing to balance updates (official Deriv pattern)...');

    const request = {
      balance: 1,
      subscribe: 1,
      req_id: this.generateRequestId('balance_sub')
    };

    // Register handler for balance updates with enhanced debugging
    this.subscribers.set('balance_updates', {
      onConnection: (data: any) => {
        console.log('üîç DERIV PATTERN: Raw balance message received:', data);

        if (data.balance) {
          console.log('üí∞ DERIV PATTERN: Balance update received:', {
            balance: data.balance.balance,
            currency: data.balance.currency,
            loginid: data.balance.loginid,
            subscription_id: data.subscription?.id,
            timestamp: new Date().toISOString()
          });

          // Store subscription ID for later cleanup
          if (data.subscription?.id) {
            this.activeSubscriptions.add(data.subscription.id);
            console.log('‚úÖ Balance subscription ID stored:', data.subscription.id);
          }

          // Notify all subscribers about balance update
          this.notifySubscribers('onBalance', {
            balance: data.balance.balance,
            currency: data.balance.currency,
            loginid: data.balance.loginid || this.currentAccount,
            is_virtual: (data.balance.loginid || this.currentAccount)?.startsWith('VRT') || false
          });
        } else {
          console.log('üîç DERIV PATTERN: Non-balance message in balance handler:', data);
        }
      }
    });

    this.send(request);
    console.log('‚úÖ Balance subscription request sent', {
      request,
      currentAccount: this.currentAccount,
      authToken: this.authToken ? 'Present' : 'Missing'
    });
  }
EOF\r"
expect "#"

# Replace the subscribeToBalanceUpdates function with the enhanced version
send "python3 << 'EOF'
import re

# Read the file
with open('client/src/services/DerivWebSocketService.ts', 'r') as f:
    content = f.read()

# Find and replace the subscribeToBalanceUpdates function
pattern = r'(\s+/\*\*\s+\*\s+PADR√ÉO OFICIAL DERIV:[^}]+})'
replacement = '''  /**
   * PADR√ÉO OFICIAL DERIV: Subscribe to balance updates after authorization
   */
  private subscribeToBalanceUpdates(): void {
    console.log('üí∞ Subscribing to balance updates (official Deriv pattern)...');

    const request = {
      balance: 1,
      subscribe: 1,
      req_id: this.generateRequestId('balance_sub')
    };

    // Register handler for balance updates with enhanced debugging
    this.subscribers.set('balance_updates', {
      onConnection: (data: any) => {
        console.log('üîç DERIV PATTERN: Raw balance message received:', data);

        if (data.balance) {
          console.log('üí∞ DERIV PATTERN: Balance update received:', {
            balance: data.balance.balance,
            currency: data.balance.currency,
            loginid: data.balance.loginid,
            subscription_id: data.subscription?.id,
            timestamp: new Date().toISOString()
          });

          // Store subscription ID for later cleanup
          if (data.subscription?.id) {
            this.activeSubscriptions.add(data.subscription.id);
            console.log('‚úÖ Balance subscription ID stored:', data.subscription.id);
          }

          // Notify all subscribers about balance update
          this.notifySubscribers('onBalance', {
            balance: data.balance.balance,
            currency: data.balance.currency,
            loginid: data.balance.loginid || this.currentAccount,
            is_virtual: (data.balance.loginid || this.currentAccount)?.startsWith('VRT') || false
          });
        } else {
          console.log('üîç DERIV PATTERN: Non-balance message in balance handler:', data);
        }
      }
    });

    this.send(request);
    console.log('‚úÖ Balance subscription request sent', {
      request,
      currentAccount: this.currentAccount,
      authToken: this.authToken ? 'Present' : 'Missing'
    });
  }'''

# Replace the function
new_content = re.sub(
    r'(\s+/\*\*\s+\*\s+PADR√ÉO OFICIAL DERIV: Subscribe to balance updates after authorization\s+\*/\s+private subscribeToBalanceUpdates\(\): void \{[^}]+(?:\{[^}]*\}[^}]*)*\})',
    replacement,
    content,
    flags=re.DOTALL
)

# Write back
with open('client/src/services/DerivWebSocketService.ts', 'w') as f:
    f.write(new_content)

print("‚úÖ Enhanced subscribeToBalanceUpdates function updated")
EOF\r"
expect "#"

# Verify the fixes were applied
puts "üîç Verifying fixes..."

send "echo '=== VERIFICATION: Authorization method ===' && grep -A 15 'Autoriza√ß√£o realizada com sucesso para conta' client/src/services/DerivWebSocketService.ts\r"
expect "#"

send "echo '=== VERIFICATION: Balance subscription function ===' && grep -A 10 'Subscribing to balance updates' client/src/services/DerivWebSocketService.ts\r"
expect "#"

# Build the frontend with the fixes
puts "üèóÔ∏è Building frontend with fixes..."

send "cd client && npm run build\r"
expect {
    "webpack compiled successfully" {
        puts "‚úÖ Frontend build successful"
    }
    "npm ERR!" {
        puts "‚ùå Build failed"
        send "npm run build\r"
        expect "#"
    }
    timeout {
        puts "‚è≥ Build taking longer than expected, continuing..."
    }
}

expect "#"

# Copy build to nginx directory
send "cp -r build/* /var/www/eonpro/\r"
expect "#"
puts "‚úÖ Build files copied to nginx"

# Restart services
send "pm2 restart eon-server\r"
expect "#"
puts "‚úÖ Server restarted"

send "systemctl reload nginx\r"
expect "#"
puts "‚úÖ Nginx reloaded"

# Check if everything is running
send "pm2 status\r"
expect "#"

send "echo '‚úÖ DEPLOYMENT COMPLETE - Balance subscription fix applied'\r"
expect "#"

puts "\nüéØ CRITICAL FIXES DEPLOYED:"
puts "1. ‚úÖ Added subscribeToBalanceUpdates() call after authorization"
puts "2. ‚úÖ Enhanced balance subscription debugging"
puts "\nExpected logs after account switch:"
puts "üí∞ Subscribing to balance updates (official Deriv pattern)..."
puts "‚úÖ Balance subscription request sent"
puts "üí∞ DERIV PATTERN: Balance update received: {...}"

send "exit\r"
expect eof

puts "\nüöÄ Balance subscription fix deployment completed successfully!"